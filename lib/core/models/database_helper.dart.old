import 'dart:async';
import 'dart:io';
import 'dart:convert';

import 'package:http/http.dart' as http;
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';
import '../../core/models/user_model.dart';
import '../../core/services/HashHelper.dart';
import '../../ui/shared/logger.dart';
// import '../../ui/shared/logger.dart';

 class DatabaseHelper {   // Singleton Database Helper
    
   static DatabaseHelper _databaseHelper;
 
  DatabaseHelper._createInstance();   // Named constructer to create instance of DatabaseHelper
  static Database _database;

factory DatabaseHelper() {

  if (_databaseHelper == null) {
      _databaseHelper = DatabaseHelper._createInstance();  //Executed only once, singleton object
  }
  return _databaseHelper;

}
  Future<Database> get database async {
    if (_database != null) return _database;
    // if _database is null we instantiate it
    _database = await initDB();
    return _database;
  }

  initDB() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, "fa_qrcode.db");
    return await openDatabase(path, version: 1, onOpen: (db) {},
        onCreate: (Database db, int version) async {
      await db.execute("CREATE TABLE AppUser ("
          "id INTEGER PRIMARY KEY,"
          "email TEXT,"
          "password TEXT,"
          "history INTEGER"
          ")");
      await db.execute("INSERT INTO `AppUser` (`id`, `email`, `password`) VALUES (1, 'wplaird@bigpond.com', '123456', 1)");
    });
  }


   newAppUser(AppUser newAppUser) async {

    Database db = await this.database;
    //get the biggest id in the table
    var table = await db.rawQuery("SELECT MAX(id)+1 as id FROM AppUser");
    int id = table.first["id"];
    //insert to the table using the new id
    var raw = await db.rawInsert(
        "INSERT Into AppUser (id,email,password)"
        " VALUES (?,?,?,?)",
        [id, newAppUser.email, newAppUser.password, newAppUser.serverConnect]); //TODO
//          [id, "wplaird@bigpond.com", "123456", 0]);

  return raw;
  }

  historyOnOrOff(AppUser appuser) async {
    Database db = await this.database;
    AppUser history = AppUser(
        email: appuser.email,
        password: appuser.password,
        history: appuser.history);
    var res = await  db.update("AppUser", history.toMap(),
        where: "email = ?", whereArgs: [appuser.email]);
    return res;
  }

  Future<int> updateAppUser(AppUser newAppUser) async {
    Database db = await this.database;
    var res = await  db.update("AppUser", newAppUser.toMap(),
        where: "email = ?", whereArgs: [newAppUser.email]);
    return res;
  }



  Future<List<AppUser>> getHistoryOnAppUsers() async {
    Database db = await this.database;

    print("works");
    // var res = await db.rawQuery("SELECT * FROM AppUser WHERE history=1");
    var res = await db.query("AppUser", where: "history = ? ", whereArgs: [1]);

    List<AppUser> list =
        res.isNotEmpty ? res.map((c) => AppUser.fromMap(c)).toList() : [];
    return list;
  }

  Future<List<AppUser>> getAllAppUsers() async {
    Database db = await this.database;
    var res = await db.query("AppUser");
    List<AppUser> list =
        res.isNotEmpty ? res.map((c) => AppUser.fromMap(c)).toList() : [];
    return list;
  }

  deleteAppUser(int email) async {
    Database db = await this.database;
    return db.delete("AppUser", where: "email = ?", whereArgs: [email]);
  }

  deleteAll() async {
    Database db = await this.database;
    db.rawDelete("Delete * from AppUser");
  }

  Future<AppUser> getAppUser(String email) async {
    getAppUser(email);

    String lowerEmail = email.toLowerCase();

    Database db = await this.database;
    var res = await db.query("AppUser", where: "email = ?", whereArgs: [lowerEmail]);
//    getLogger("inside getAppUser, after db.query. res $res length ${res.length} not empty ${res.isNotEmpty}, res.first, ${res.first}" );
    return res.length > 0 ? AppUser.fromMap(res.first) : null;
  }


  Future<String> canLogin(String forEmail, String typedInPassword) async {

  // canLogin(forEmail, typedInPassword);


    getLogger(
        "canLogin: before password length check user: $forEmail, password: $typedInPassword");
    if (typedInPassword == null || typedInPassword.length == 0)
      return "Missing password";

    var currentUser = await getAppUser(forEmail);

    if (currentUser == null) {
      return "Unknown username.";
    }

    getLogger("inside canLogin, after email null check ${currentUser.email}");

    var hashedPassword = HashHelper.getHash(typedInPassword);
    var savedPassword =
        currentUser.password; // utf8.encode(currentDriver.encryptedPassword);

    if (hashedPassword.length !=
        savedPassword.length) // TODO: Setup New Usercode
      return "Bad password (short)";
//      var hashedPassword = HashHelper.getHash(typedInPassword);
//      currentUser.password = hashedPassword;
//      updateAppUser(currentUser);
    if (currentUser.password.compareTo(hashedPassword) != 0)
//      var hashedPassword = HashHelper.getHash(typedInPassword);
//      currentUser.password = hashedPassword;
//      updateAppUser(currentUser);
      return "Bad password";

    return "";
  }

  

  Future getAppUserFromServer() async {

    var url = 'https://progressprogrammingsolutions.com.au/get_user.php';
    http.Response response = await http.get(url);
    var data = jsonDecode(response.body);
    print (data.toString());

  }

 }


